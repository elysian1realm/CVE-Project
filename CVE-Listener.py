import datetime
import requests
import json
import os
from base64 import b64encode
from nacl import encoding, public
import re
import time
from lxml import etree

# 有道翻译API
def rcs_translate(text):
    url = 'https://aidemo.youdao.com/trans'
    try:
        data = {"q": text, "from": "auto", "to": "zh-CHS"}
        resp = requests.post(url, data)
        if resp is not None and resp.status_code == 200:
              respJson = json.loads(resp.text)
              if "translation" in respJson:
                   text ="\n".join('' + str(i) for i in respJson["translation"])
    except:
        print("[WARN] Error translating message!")
    return text


def rcs_fetch_public_key(auth, url):
    headers={'Accept': 'application/vnd.github.v3+json','Authorization': auth}
    html = requests.get(url,headers=headers)
    jsontxt = json.loads(html.text)
    if 'key' in jsontxt:
        print("[INFO] Get public key succeeded")
    else:
        print("[ERROR] Get public key failed :( Is secret GH_TOKEN set correctly? ")
    public_key = jsontxt['key']
    global key_id 
    key_id = jsontxt['key_id']
    return public_key


def rcs_create_secret(public_key, secret_value):
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(str(secret_value).encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")


def rcs_update_secret(encrypted_value, key_id, url,auth):
    headers={'Accept': 'application/vnd.github.v3+json','Authorization': auth}
    data_str=r'{"encrypted_value":"'+encrypted_value+r'",'+r'"key_id":"'+key_id+r'"}'
    putstatus=requests.put(url,headers=headers,data=data_str)
    if putstatus.status_code >= 300:
        print("[ERROR] total_count upload failed!")
    else:
        print("[INFO] total_count upload succeeded!")
    return putstatus


def rcs_fetch_cve_news():
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2023&sort=updated"
        headers = {
          "Authorization": "Bearer "+gh_token
         }
        req = requests.get(api, headers=headers).text
        respJson = json.loads(req)
        cve_total_count=respJson["total_count"]
        if respJson["items"][0]["description"]:
           cve_description = respJson["items"][0]["description"]
        else:
           cve_description = "NULL!"   
        cve_url = respJson["items"][0]["svn_url"]
        return cve_total_count,cve_description,cve_url

    except Exception as e:
        print ("[ERROR] ",e,"Can not connect to github :( ")


# 检查CVE_ID
def check_cve_id(cve, auth):
    query_cve_url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
    github_headers = {'Authorization': auth}
    response = requests.get(query_cve_url, headers=github_headers, timeout=10)
    html = etree.HTML(response.text)
    if re.findall('但该记录不存在', str(html), flags=re.IGNORECASE):
        print("[警告] CVE_ID 不存在，跳过...")
        return 0
    else:
        return 1


# 检查CVE_ID
def rcs_check_cve_id(cve, auth):
    query_cve_url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
    github_headers = {'Authorization': auth}
    response = requests.get(query_cve_url, headers=github_headers, timeout=10)
    html = etree.HTML(response.text)
    if re.findall('但该记录不存在', str(html), flags=re.IGNORECASE):
        print("[警告] CVE_ID 不存在，跳过...")
        return 0
    else:
        return 1


def rcs_fetch_cve_id(respJson):
    cve_id = re.findall('(CVE\-\d+\-\d+)', respJson["items"][0]["name"], flags=re.IGNORECASE)
    cve_description = respJson["items"][0]["description"]
    if not cve_description:
        print("[WARN] Description not found for " + cve_id)
    else:
        cve_description_id = re.findall('(CVE\-\d+\-\d+)', cve_description, flags=re.IGNORECASE)
        if cve_description_id:
            cve_id.extend(cve_description_id)

    if cve_id:
        return cve_id[0]
    else:
        print("[WARN] 获取CVE_ID失败")
        return None



def rcs_fetch_cve_description(cve):
    cve_desc_url = "https://nvd.nist.gov/vuln/detail/" + cve
    response = requests.get(cve_desc_url)
    html = etree.HTML(response.text)
    result = html.xpath('//*[@id="p_lt_103_pageplaceholder_p_lt_106_zonecenter_pageplaceholder_p_lt_107_cve_vulnDetail_nvdvulnDetail_nvdVulnDetailForm"]/div[2]/div[2]/div/div[1]/div/div[1]/p[1]/text()')
    if len(result) > 0:
        return result[0]
    else:
        return "Description not found for " + cve


def rcs_send_wechat(cve_des):
    try:
        key = option
        text = "CVE-2023 新增漏洞"
        desp = cve_des
        url = "https://sctapi.ftqq.com/"+key+".send"
        data = {
            "text": text,
            "desp": desp
        }
        response = requests.post(url, data=data)
        print(response.text)
    except Exception as e:
        print("[ERROR] ", e)


def rcs_send_cve_news(total_count):
    if total_count > 0:
        cve_news = rcs_fetch_cve_news()
        if cve_news is not None:
            cve_total_count, cve_description, cve_url = cve_news
            cve_id = rcs_fetch_cve_id(cve_news)
            cve_des = rcs_fetch_cve_description(cve_id)
            rcs_send_wechat(cve_des)
    else:
        print("[INFO] No new CVEs found.")


if __name__ == "__main__":
    gh_token = os.getenv('GH_TOKEN')
    gh_repo = os.getenv('GH_REPO')
    option = os.getenv('option')
    Auth = r'token ' + gh_token
    geturl = r'https://api.github.com/repos/' + gh_repo + r'/actions/secrets/public-key'
    public_key = rcs_fetch_public_key(Auth, geturl)
    total_count = rcs_check_cve_id("CVE-2023-xxxx", Auth)
    encrypted_value = rcs_create_secret(public_key, total_count)
    rcs_update_secret(encrypted_value, key_id, geturl, Auth)
    rcs_send_cve_news(total_count)

