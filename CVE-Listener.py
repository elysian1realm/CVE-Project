import datetime
import json
import os
import re
import time
from base64 import b64encode

import requests
from lxml import etree
from nacl import encoding, public


# Youdao translation API
def rcs_translate(text):
    url = 'https://aidemo.youdao.com/trans'
    try:
        data = {"q": text, "from": "auto", "to": "zh-CHS"}
        resp = requests.post(url, data)
        if resp is not None and resp.status_code == 200:
            respJson = json.loads(resp.text)
            if "translation" in respJson:
                text = "\n".join('' + str(i) for i in respJson["translation"])
    except:
        print("[WARN] Error translating message!")
    return text


def rcs_getpublickey(Auth, geturl):
    headers={'Accept': 'application/vnd.github.v3+json','Authorization': Auth}
    html = requests.get(geturl,headers=headers)
    jsontxt = json.loads(html.text)
    if 'key' in jsontxt:
        print("[INFO] Get public key suceeded")
    else:
        print("[ERROR] Get public key failed :( Is secret GH_TOKEN set correctly? ")
    public_key = jsontxt['key']
    global key_id 
    key_id = jsontxt['key_id']
    return public_key


def rcs_createsecret(public_key, secret_value):
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(str(secret_value).encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")


def rcs_setsecret(encrypted_value, key_id, puturl):
    headers = {'Accept': 'application/vnd.github.v3+json', 'Authorization': Auth}
    data_str = r'{"encrypted_value":"' + encrypted_value + r'",' + r'"key_id":"' + key_id + r'"}'
    putstatus = requests.put(puturl, headers=headers, data=data_str)
    if putstatus.status_code >= 300:
        print("[ERROR] total_count upload failed!")
    else:
        print("[INFO] total_count upload succeeded!")
    return putstatus


def rcs_getNews():
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2023&sort=updated"
        headers = {
            "Authorization": "Bearer " + gh_token
        }
        req = requests.get(api, headers=headers).text
        respJson = json.loads(req)
        cve_id = respJson["items"][0]["name"]
        if cve_id.startswith("CVE-2023"):
            print("The string starts with CVE-2023")
        else:
            print("The string does not start with CVE-2023")
            cve_id = respJson["items"][0]["full_name"]
        cve_total_count = respJson["total_count"]
        if respJson["items"][0]["description"]:
            cve_description = respJson["items"][0]["description"]
        else:
            cve_description = "NULL!"
        cve_url = respJson["items"][0]["svn_url"]
        return cve_total_count, cve_description, cve_url

    except Exception as e:
        print("[ERROR] Fetching CVE-2023 information failed!")
        print(e)
        return None, None, None


def rcs_getCVE(CVE_URL):
    try:
        headers = {
            "Authorization": "Bearer " + gh_token
        }
        req = requests.get(CVE_URL, headers=headers).text
        html = etree.HTML(req)
        cve_info_list = html.xpath('//*[@id="readme"]/div[2]/article/p/text()')
        cve_info = "\n".join('' + str(i) for i in cve_info_list)
        if cve_info == "":
            cve_info = "No detailed CVE information found."
    except Exception as e:
        print("[ERROR] Fetching CVE details failed!")
        print(e)
        cve_info = "No detailed CVE information found."
    return cve_info


if __name__ == '__main__':
    # Set your environment variables
    gh_token = os.environ.get("GH_TOKEN")
    Auth = "Bearer " + gh_token

    # Get news
    cve_total_count, cve_description, cve_url = rcs_getNews()

    # Translate description
    cve_description_translated = rcs_translate(cve_description)

    # Get CVE details
    cve_info = rcs_getCVE(cve_url)

    # Get public key
    geturl = "https://api.github.com/repos/rcs-work/test_repo/actions/secrets/public-key"
    public_key = rcs_getpublickey(Auth, geturl)

    # Create secret
    secret_value = f"total_count: {cve_total_count}\n{cve_description}\n{cve_description_translated}\n{cve_info}"
    encrypted_value = rcs_createsecret(public_key, secret_value)

    # Set secret
    puturl = "https://api.github.com/repos/rcs-work/test_repo/actions/secrets/CVE_REPORT"
    rcs_setsecret(encrypted_value, key_id, puturl)

