import datetime
import urllib
import requests, re, time
import html
import json
import os
from base64 import b64encode
from nacl import encoding, public
from lxml import etree
import asyncio
import time

def rcs_translate(text):
    url = 'https://aidemo.youdao.com/trans'
    try:
        data = {"q": text, "from": "auto", "to": "zh-CHS"}
        resp = requests.post(url, data)
        if resp is not None and resp.status_code == 200:
            respJson = json.loads(resp.text)
            if "translation" in respJson:
                text = "\n".join('' + str(i) for i in respJson["translation"])
    except:
        print("[WARN] Error translating message!")
    return text

def rcs_getpublickey(Auth, geturl):
    headers = {'Accept': 'application/vnd.github.v3+json', 'Authorization': Auth}
    html = requests.get(geturl, headers=headers)
    jsontxt = json.loads(html.text)
    public_key = jsontxt['key']
    global key_id
    key_id = jsontxt['key_id']
    return public_key

def rcs_createsecret(public_key, secret_value):
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(str(secret_value).encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")

def rcs_setsecret(encrypted_value, key_id, puturl,Auth):
    headers = {'Accept': 'application/vnd.github.v3+json', 'Authorization': Auth}
    data_str = r'{"encrypted_value":"' + encrypted_value + r'",' + r'"key_id":"' + key_id + r'"}'
    putstatus = requests.put(puturl, headers=headers, data=data_str)
    return putstatus

def rcs_getNews(gh_token):
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2023&sort=updated"
        headers = {
            "Authorization": "Bearer " + gh_token
        }
        req = requests.get(api, headers=headers).text
        respJson = json.loads(req)
        cve_id = respJson["items"][0]["name"]
        if not cve_id.startswith("CVE-2023"):
            cve_id = respJson["items"][0]["full_name"]
        cve_total_count = respJson["total_count"]
        if respJson["items"][0]["description"]:
            cve_description = respJson["items"][0]["description"]
        else:
            cve_description = "NULL!"
        cve_url = respJson["items"][0]["svn_url"]
        return cve_total_count, cve_description, cve_url

    except Exception as e:
        print("[ERROR] ", e, "Can not connect to github :( ")

def rcs_exist_cve(cve, Auth):
    query_cve_url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
    github_headers = {'Authorization': Auth}
    response = requests.get(query_cve_url, headers=github_headers, timeout=10)
    html = etree.HTML(response.text)
    if re.findall('but the record does not exist', str(html), flags=re.IGNORECASE):
        print("[WARN] CVE_ID doesn't exist, skipping...")
        return 0
    else:
        return 1

 
def rcs_get_cve_des(cve, Auth):
    try:
        time.sleep(3)
        query_cve_url = "https://www.cve.org/api/?action=getCveById&cveId=" + cve
        github_headers = {
        'Authorization': Auth }
        resp = requests.get(query_cve_url, headers=github_headers, timeout=10)
        respJson = json.loads(resp.text)
        des = respJson["containers"]["cna"]["descriptions"][0]["value"]
        return des
    except Exception as e:
        err = "* **RESERVED** *"
        print("[WARN] Get CVE description Failed, cause CVE refused")
        return err

  

def rcs_getid(respJson):
    cve_name = respJson["items"][0]["name"]
    cve_id = re.findall('(CVE\-\d+\-\d+)', cve_name, flags=re.IGNORECASE)
    des = respJson["items"][0]["description"]
    if des:
        cve_des = re.findall('(CVE\-\d+\-\d+)', des, flags=re.IGNORECASE)
    if(int(respJson["items"][0]["size"]) == 0):
        print("[WARN] Repo is empty or only contains readme...Skipping...")
        exit(0)
    readme = "https://raw.githubusercontent.com/" + str(respJson["items"][0]["full_name"]) + "/main/README.md"
    readme_content = requests.get(readme).text
    if str(cve_id) == "[]":
         cve_id = cve_id + re.findall('(CVE\-\d+\-\d+)', readme_content, flags=re.IGNORECASE)
    if str(cve_id) != "[]":
        if("cve" in str(cve_id[0])):
             return re.sub("cve", "CVE", str(cve_id[0]))
        return cve_id[0]
    else:
         print("[WARN] Get CVE ID Failed, Does the repo contain the correct info?")
         exit(0)

  

def rcs_Wechat(cve_des, Auth):
    # 获取CVE_ID
    
    # The title of the message
    text = r'HI~~ 赤小兔AI助手!预警 有新的CVE漏洞更新送达!'
    
    # Process SCKEYs
    sckey = os.getenv('SCKEY')
    sckeys = sckey.split(",")
    
    # 获取当前系统日期
    now = datetime.datetime.now()
    
    # The contents of the message
    msg ="\n"+"* CVE相关项目总数: " + str(rcs_getNews()[0]) + "\n" +"* GitHub项目介绍: " + rcs_getNews()[1]+"\n"+"> ("+rcs_translate(rcs_getNews()[1])+")"+"\n"+ "* 链接: " + getNews()[2] +  "\n" + "* 该CVE编号的详情: " + cve_des +"\n"+"> ("+translate(cve_des)+")"+"\n"+"\n"+ "(⁄ ⁄•⁄ω⁄•⁄ ⁄)"
    # Python 字典
    msg_dict = {
        'cve_cnt':int(rcs_getNews()[0]),
        'cve':rcs_getNews()[1],
        'link':rcs_getNews()[2],
        'cve_des':cve_des,
        'cnvd':'CNVD-0000-00000',
        'cnnvd': 'CNNVD-0000-00000',
        'level':'高危',
        'date':now.strftime('%Y-%m-%d %H:%M:%S')
    }
    # 字典转JSON对象
    msg_json = json.dumps(msg_dict, indent=4, ensure_ascii=False)
    # 定义一个URL，用于测试
    url = 'http://1.13.191.68:8089/input'
    # 设置请求头
    headers = {'Content-Type': 'application/json'}
    # 发送请求
    response = requests.post(url, headers=headers, data=msg_json.encode('utf-8'))
    # 打印请求结果
    print(response.text)
    for key in sckeys:
        uri = 'https://sc.ftqq.com/'+ key +'.send?text={}&desp={}'.format(text, msg)
        send = requests.get(uri)




def rcs_sendNews(total_count, Auth):
    try:
        time.sleep(3)
        git_search_url = "https://api.github.com/search/repositories?q=CVE&sort=updated&order=desc&per_page=" + str(total_count)
        github_headers = {'Authorization': Auth}
        resp = requests.get(git_search_url, headers=github_headers)
        respJson = json.loads(resp.text)
        total_count = respJson["total_count"]
        for i in range(0, total_count):
            repo_url = respJson["items"][i]["html_url"]
            cve_id = rcs_getid(respJson)
            if rcs_exist_cve(cve_id, Auth) == 1:
                cve_des = rcs_get_cve_des(cve_id, Auth)
                rcs_Wechat(cve_des, Auth)
            else:
                continue
    except Exception as e:
        print("[WARN] Get CVE News Failed, maybe caused by GitHub API limit")



if __name__ == '__main__':
    gh_token = os.getenv('GH_TOKEN')
    gh_repo = os.getenv('GH_REPO')
    option = os.getenv('option')
    Auth = r'token ' + gh_token
    total_count = os.getenv('total_count')
    geturl = r'https://api.github.com/repos/' + gh_repo + r'/actions/secrets/public-key'
    puturl = r'https://api.github.com/repos/' + gh_repo + r'/actions/secrets/TOTAL_COUNT'
    key_id = 'qwq'
    encrypted_value = rcs_createsecret(rcs_getpublickey(Auth, geturl), rcs_sendNews(total_count, Auth))
    rcs_setsecret(encrypted_value, key_id, puturl, Auth)

