import datetime
import urllib
import requests, re, time
import html
import json
import os
from base64 import b64encode
from nacl import encoding, public
from lxml import etree
import asyncio
import time

def rcs_translate(text):
    url = 'https://aidemo.youdao.com/trans'
    try:
        data = {"q": text, "from": "auto", "to": "zh-CHS"}
        resp = requests.post(url, data)
        if resp is not None and resp.status_code == 200:
            respJson = json.loads(resp.text)
            if "translation" in respJson:
                text = "\n".join('' + str(i) for i in respJson["translation"])
    except:
        print("[WARN] Error translating message!")
    return text

def rcs_get_public_key(Auth, geturl):
    headers = {'Accept': 'application/vnd.github.v3+json', 'Authorization': Auth}
    html = requests.get(geturl, headers=headers)
    jsontxt = json.loads(html.text)
    if 'key' in jsontxt:
        print("[INFO] Get public key succeeded")
    else:
        print("[ERROR] Get public key failed :( Is secret GH_TOKEN set correctly? ")
    public_key = jsontxt['key']
    global key_id
    key_id = jsontxt['key_id']
    return public_key

def rcs_create_secret(public_key, secret_value):
    public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(str(secret_value).encode("utf-8"))
    return b64encode(encrypted).decode("utf-8")

def rcs_set_secret(encrypted_value, key_id, puturl, Auth):
    headers = {'Accept': 'application/vnd.github.v3+json', 'Authorization': Auth}
    data_str = r'{"encrypted_value":"' + encrypted_value + r'",' + r'"key_id":"' + key_id + r'"}'
    putstatus = requests.put(puturl, headers=headers, data=data_str)
    if putstatus.status_code >= 300:
        print("[ERROR] total_count upload failed!")
    else:
        print("[INFO] total_count upload succeeded!")
    return putstatus

def rcs_get_news(gh_token):
    try:
        api = "https://api.github.com/search/repositories?q=CVE-2023&sort=updated"
        headers = {
            "Authorization": "Bearer " + gh_token
        }
        req = requests.get(api, headers=headers).text
        respJson = json.loads(req)
        cve_id = respJson["items"][0]["name"]
        if cve_id.startswith("CVE-2023"):
            print("The string starts with CVE-2023")
        else:
            print("The string does not start with CVE-2023")
            cve_id = respJson["items"][0]["full_name"]
        cve_total_count = respJson["total_count"]
        if respJson["items"][0]["description"]:
            cve_description = respJson["items"][0]["description"]
        else:
            cve_description = "NULL!"
        cve_url = respJson["items"][0]["svn_url"]
        return cve_total_count, cve_description, cve_url
    except Exception as e:
        print("[ERROR] ", e, "Can not connect to github :( ")

def rcs_exist_cve(cve, Auth):
    headers = {'Authorization': Auth}
    cve_url = "https://nvd.nist.gov/ncp/repository/cve/" + cve
    response = requests.get(cve_url, headers=headers)

    if response.status_code == 200:
        return True
    else:
        return False


def rcs_get_cve_des(cve, Auth):
    cve_description = ""
    if rcs_exist_cve(cve, Auth):
        cve_url = "https://cve.mitre.org/cgi-bin/cvename.cgi?name=" + cve
        response = requests.get(cve_url)
        soup = BeautifulSoup(response.text, "html.parser")
        cve_description = soup.find("td", {"valign": "top"}).text
    else:
        cve_description = "CVE description not found."
    return cve_description

def rcs_get_id(respJson):
    cve_id = respJson["items"][0]["name"]
    if cve_id.startswith("CVE-2023"):
        print("The string starts with CVE-2023")
    else:
        print("The string does not start with CVE-2023")
        cve_id = respJson["items"][0]["full_name"]
    return cve_id

def rcs_wechat(cve_des, sckey):
    url = "https://sc.ftqq.com/" + sckey + ".send"
    title = "CVE NEWS!"
    text = cve_des + "\n\n" + "This is an auto-generated message. Please do not reply."
    data = {
        "text": title,
        "desp": text
    }
    req = requests.post(url, data=data)
    print("Send News to Wechat: ", req.status_code)

def rcs_send_news(total_count, gh_token, option, Auth):
    cve_total_count, cve_description, cve_url = rcs_get_news(gh_token)
    if int(total_count) < int(cve_total_count):
        print("New CVE Found!")
        cve_id = rcs_get_id(respJson)
        cve_des = rcs_get_cve_des(cve_id, Auth)
        cve_des_translated = rcs_translate(cve_des)
        cve_des = cve_des + "\n\n" + cve_des_translated
        rcs_wechat(cve_des, sckey)
    else:
        print("No new CVEs found.")


if __name__ == '__main__':
    gh_token = os.getenv('GH_TOKEN')
    gh_repo = os.getenv('GH_REPO')
    option = os.getenv('option')
    Auth = r'token ' + gh_token
    geturl = r'https://api.github.com/repos/' + gh_repo + r'/actions/secrets/public-key'

    total_count = os.getenv('total_count')
    puturl = r'https://api.github.com/repos/' + gh_repo + r'/actions/secrets/TOTAL_COUNT'
    
    public_key = rcs_get_public_key(Auth, geturl)
    key_id = rcs_get_key_id(Auth, geturl)
    
    total_count_updated = rcs_send_news(total_count, gh_token, option, Auth)
    
    encrypted_value = rcs_create_secret(public_key, total_count_updated)
    rcs_set_secret(encrypted_value, key_id, puturl, Auth)

